package main

import "fmt"

type Library interface {

	// Добавя книга от json
	// Oтговаря с общия брой копия в библиотеката (не само наличните).
	// Aко са повече от 4 - връща грешка
	AddBookJSON(data []byte) (int, error)

	// Добавя книга от xml
	// Oтговаря с общия брой копия в библиотеката (не само наличните).
	// Ако са повече от 4 - връщаме грешка
	AddBookXML(data []byte) (int, error)

	// Ангажира свободен "библиотекар" да ни обработва заявките.
	// Библиотекарите са фиксиран брой - подават се като параметър на NewLibrary
	// Блокира ако всички библиотекари са заети.
	// Връщат се два канала:
	// първият е само за писане -  по него ще изпращаме заявките
	// вторият е само за четене - по него ще получаваме отговорите.
	// Ако затворим канала със заявките - освобождаваме библиотекаря.
	Hello() (chan<- LibraryRequest, <-chan LibraryResponse)
}

type LibraryRequest interface {
	// Тип на заявката:
	// 1 - Borrow book
	// 2 - Return book
	// 3 - Get availability information about book
	GetType() int

	// Връща isbn на книгата, за която се отнася Request-a
	GetISBN() string
}

type LibraryResponse interface {
	// Ако книгата съществува/налична е - обект имплементиращ Stringer (повече информация по-долу)
	// Aко книгата не съществува първият резултат е nil.
	// Връща се и подобаващa грешка (виж по-долу) - ако такава е възникнала.
	// Когато се е резултат на заявка от тип 2 (Return book) - не е нужно да я закачаме към отговора.
	GetBook() (fmt.Stringer, error)

	// available - Колко наличности от книгата имаме останали след изпълнението на заявката.
	// Тоест, ако сме имали 3 копия от Х и това е отговор на Take заявка - тук ще има 2.
	// registered - Колко копия от тази книга има регистрирани в библиотеката (макс 4).
	GetAvailability() (available int, registered int)
}
